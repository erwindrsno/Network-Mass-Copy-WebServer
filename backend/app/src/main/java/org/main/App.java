/*
 * This source file was generated by the Gradle 'init' task
 */
package org.main;

import static io.javalin.apibuilder.ApiBuilder.*;

import org.computer.ComputerController;
import org.computer.ComputerModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.user.UserController;
import org.user.UserModule;

import org.main.session.SessionConfig;
import org.main.session.SessionModule;

import com.google.inject.Guice;
import com.google.inject.Injector;

import io.javalin.Javalin;
import io.javalin.http.Context;
import io.javalin.http.UnauthorizedResponse;
import io.javalin.json.JavalinJackson;

public class App {
    private static Logger logger = LoggerFactory.getLogger(App.class);

    public static void main(String[] args) {
        Injector injector = Guice.createInjector(new ComputerModule(), new UserModule(), new DatabaseModule(),
                new SessionModule());

        ComputerController computerController = injector.getInstance(ComputerController.class);
        UserController userController = injector.getInstance(UserController.class);
        SessionConfig sessionConfig = injector.getInstance(SessionConfig.class);

        Javalin app = Javalin.create(config -> {
            config.jetty.modifyServletContextHandler(
                    handler -> handler.setSessionHandler(sessionConfig.sqlSessionHandler()));
            config.jsonMapper(new JavalinJackson());
            config.router.apiBuilder(() -> {
                before(ctx -> {
                    ctx.header("Access-Control-Allow-Origin", "http://localhost:3000");
                    ctx.header("Access-Control-Allow-Credentials", "true");

                    if (!ctx.path().equals("/users/login") && !isAuthenticated(ctx)) {
                        throw new UnauthorizedResponse("Unauthorized! Please log in first.");
                    }
                });

                path("/users", () -> {
                    get(userController::getAllUsers);
                    post(userController::insertUser);
                    path("/id/{id}", () -> {
                        get(userController::getUsersById);
                    });
                    path("/login", () -> {
                        post(userController::authUser);
                    });
                    path("/logout", () -> {
                        post(userController::invalidateUser);
                    });
                });

                path("/computers", () -> {
                    get(computerController::getComputers);
                    post(computerController::insertComputer);
                    path("/lab/{num}", () -> {
                        get(computerController::getComputersByLabNum);
                    });
                    path("/id/{id}", () -> {
                        get(computerController::getComputersById);
                    });
                    path("/ip_addr/{ip}", () -> {
                        get(computerController::getComputersByIpAddress);
                    });
                });
            });

        });

        app.options("/*", ctx -> {
            ctx.status(204);
        });

        app.error(404, ctx -> {
            ctx.result("Not found b*tch.");
        });

        app.get("/", ctx -> ctx.result("Hello world!!!"));
        app.start(7070);
        logger.info("Server has started!");
    }

    public static boolean isAuthenticated(Context ctx) {
        Integer userId = ctx.sessionAttribute("user_id");
        logger.info("The user ID is " + userId);

        if (userId != null) {
            return true;
        }
        return false;
    }
}
