/*
 * This source file was generated by the Gradle 'init' task
 */
package org.main;

import static io.javalin.apibuilder.ApiBuilder.*;

import org.computer.ComputerController;
import org.computer.ComputerModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.user.UserController;
import org.user.UserModule;

import org.main.session.SessionConfig;
import org.main.session.SessionModule;

import com.google.inject.Guice;
import com.google.inject.Injector;

import io.javalin.Javalin;
import io.javalin.http.Context;
import io.javalin.http.HandlerType;
import io.javalin.http.UnauthorizedResponse;
import io.javalin.json.JavalinJackson;

public class App {
  private static Logger logger = LoggerFactory.getLogger(App.class);

  public static void main(String[] args) {
    Injector injector = Guice.createInjector(new ComputerModule(), new UserModule(), new DatabaseModule(),
        new SessionModule());

    ComputerController computerController = injector.getInstance(ComputerController.class);
    UserController userController = injector.getInstance(UserController.class);
    SessionConfig sessionConfig = injector.getInstance(SessionConfig.class);

    Javalin app = Javalin.create(config -> {
      config.jetty.modifyServletContextHandler(
          handler -> handler.setSessionHandler(sessionConfig.sqlSessionHandler()));
      config.jsonMapper(new JavalinJackson());
      config.router.apiBuilder(() -> {
        before(ctx -> {
          logger.info("router level before");
          ctx.header("Access-Control-Allow-Origin", "http://localhost:3000");
          ctx.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
          ctx.header("Access-Control-Allow-Credentials", "true");
          ctx.header("Access-Control-Allow-Headers", "Content-Type, Authorization");
          if (ctx.method() == HandlerType.OPTIONS) {
            logger.info("before OPTIONS");
            ctx.status(204);
            ctx.skipRemainingHandlers();
          } else {
            if (!ctx.path().equals("/users/login") && !isAuthenticated(ctx)) {
              throw new UnauthorizedResponse("Unauthorized! Please log in first.");
            }
          }

        });

        path("/users", () -> {
          get(userController::getAllUsers);
          post(userController::insertUser);
          path("/id/{id}", () -> {
            get(userController::getUsersById);
            delete(userController::deleteUserById);
          });
          path("/login", () -> {
            post(userController::authUser);
          });
          path("/logout", () -> {
            post(userController::invalidateUser);
          });
        });

        path("/computers", () -> {
          get(computerController::getComputers);
          post(computerController::insertComputer);
          path("/lab/{num}", () -> {
            get(computerController::getComputersByLabNum);
          });
          path("/id/{id}", () -> {
            get(computerController::getComputersById);
            delete(computerController::deleteComputerById);
          });
          path("/ip_addr/{ip}", () -> {
            get(computerController::getComputersByIpAddress);
          });
        });
      });
    });

    app.error(404, ctx -> {
      ctx.result("Not found 404.");
    });

    app.get("/", ctx -> {
      logger.info("At / now!");
      ctx.result("Hello world!!!");
    });
    app.start(7070);
    logger.info("Server has started!");
  }

  public static boolean isAuthenticated(Context ctx) {
    // Integer userId = ctx.sessionAttribute("user_id");
    ctx.req().getSession(false);
    Integer userId = (Integer) ctx.sessionAttribute("user_id");
    logger.info("Authenticating...");
    if (userId != null) {
      logger.info("User is authenticated with id " + userId);
      return true;
    }
    logger.info("User is NOT authenticated");
    return false;
  }
}
